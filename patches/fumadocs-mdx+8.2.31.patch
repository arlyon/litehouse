diff --git a/node_modules/fumadocs-mdx/dist/.DS_Store b/node_modules/fumadocs-mdx/dist/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/node_modules/fumadocs-mdx/dist/.DS_Store differ
diff --git a/node_modules/fumadocs-mdx/dist/chunk-2D5JCHQ5.mjs b/node_modules/fumadocs-mdx/dist/chunk-2D5JCHQ5.mjs
new file mode 100644
index 0000000..8c26a76
--- /dev/null
+++ b/node_modules/fumadocs-mdx/dist/chunk-2D5JCHQ5.mjs
@@ -0,0 +1,303 @@
+// src/config.ts
+import path2 from "node:path";
+import {
+  rehypeCode,
+  remarkGfm,
+  remarkStructure,
+  remarkHeading,
+  remarkImage
+} from "fumadocs-core/mdx-plugins";
+
+// src/mdx-plugins/utils.ts
+import { valueToEstree } from "estree-util-value-to-estree";
+function getMdastExport(name, value) {
+  return {
+    type: "mdxjsEsm",
+    value: "",
+    data: {
+      estree: {
+        type: "Program",
+        sourceType: "module",
+        body: [
+          {
+            type: "ExportNamedDeclaration",
+            specifiers: [],
+            source: null,
+            declaration: {
+              type: "VariableDeclaration",
+              kind: "const",
+              declarations: [
+                {
+                  type: "VariableDeclarator",
+                  id: {
+                    type: "Identifier",
+                    name
+                  },
+                  init: valueToEstree(value)
+                }
+              ]
+            }
+          }
+        ]
+      }
+    }
+  };
+}
+
+// src/mdx-plugins/remark-exports.ts
+function remarkMdxExport({ values }) {
+  return (tree, vfile) => {
+    for (const name of values) {
+      if (!(name in vfile.data)) return;
+      tree.children.unshift(getMdastExport(name, vfile.data[name]));
+    }
+  };
+}
+
+// src/webpack-plugins/search-index-plugin.ts
+import * as path from "node:path";
+import { createRequire } from "node:module";
+import { createGetUrl, getSlugs, parseFilePath } from "fumadocs-core/source";
+var require2 = createRequire(import.meta.url);
+var pkg = require2("next/dist/compiled/webpack/webpack.js");
+var SearchIndexPlugin = class _SearchIndexPlugin {
+  constructor(options) {
+    this.options = options;
+  }
+  apply(compiler) {
+    const {
+      rootContentDir,
+      productionOnly = true,
+      filter = () => true,
+      getUrl = (file) => {
+        return createGetUrl("/")(getSlugs(parseFilePath(file)));
+      }
+    } = this.options;
+    const logger = compiler.getInfrastructureLogger(_SearchIndexPlugin.name);
+    const isProduction = process.env.NODE_ENV === "production";
+    if (productionOnly && !isProduction) return;
+    compiler.hooks.compilation.tap(_SearchIndexPlugin.name, (compilation) => {
+      if (compilation.name !== "server") return;
+      compilation.hooks.processAssets.tap(
+        {
+          name: _SearchIndexPlugin.name,
+          stage: pkg.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
+        },
+        () => {
+          const indexFiles = /* @__PURE__ */ new Map();
+          for (const m of compilation.modules.values()) {
+            if (!m.buildInfo || !("__fumadocs" in m.buildInfo)) continue;
+            const info = m.buildInfo.__fumadocs;
+            const relativePath = path.relative(rootContentDir, info.path);
+            if (relativePath.startsWith("../") || !filter(relativePath))
+              continue;
+            indexFiles.set(info.path, {
+              id: info.path,
+              structuredData: info.data.structuredData,
+              title: info.data.frontmatter.title,
+              description: info.data.frontmatter.description,
+              url: getUrl(relativePath)
+            });
+          }
+          compilation.emitAsset(
+            "fumadocs_search.json",
+            new pkg.sources.RawSource(
+              JSON.stringify(Array.from(indexFiles.values()))
+            )
+          );
+          logger.info("Generated Search Indexes");
+        }
+      );
+    });
+  }
+};
+
+// src/root-map-file.ts
+import * as fs from "node:fs";
+var firstLoad = true;
+var content = `
+/** Auto-generated **/
+declare const map: Record<string, unknown>
+
+export { map }
+`.trim();
+var RootMapFile = class {
+  constructor(options) {
+    this.options = options;
+  }
+  create() {
+    if (firstLoad && !fs.existsSync(this.options.rootMapFile)) {
+      fs.writeFileSync(this.options.rootMapFile, content);
+      firstLoad = false;
+      return true;
+    }
+    return false;
+  }
+};
+
+// src/config.ts
+function pluginOption(def, options = []) {
+  const list = def(Array.isArray(options) ? options : []).filter(
+    Boolean
+  );
+  if (typeof options === "function") {
+    return options(list);
+  }
+  return list;
+}
+async function getMDXLoaderOptions({
+  valueToExport = [],
+  rehypeCodeOptions,
+  remarkImageOptions,
+  remarkHeadingOptions,
+  ...mdxOptions
+}) {
+  const mdxExports = [
+    "structuredData",
+    "toc",
+    "frontmatter",
+    "lastModified",
+    ...valueToExport
+  ];
+  const remarkOptions = await resolveImportPlugins(
+    mdxOptions.remarkPlugins ?? []
+  );
+  const rehypeOptions = await resolveImportPlugins(
+    mdxOptions.rehypePlugins ?? []
+  );
+  const remarkPlugins = pluginOption(
+    (v) => [
+      remarkGfm,
+      [remarkHeading, remarkHeadingOptions],
+      remarkImageOptions !== false && [remarkImage, remarkImageOptions],
+      ...v,
+      remarkStructure,
+      [remarkMdxExport, { values: mdxExports }]
+    ],
+    remarkOptions
+  );
+  const rehypePlugins = pluginOption(
+    (v) => [
+      rehypeCodeOptions !== false && [rehypeCode, rehypeCodeOptions],
+      ...v
+    ],
+    rehypeOptions
+  );
+  return {
+    providerImportSource: "next-mdx-import-source-file",
+    ...mdxOptions,
+    remarkPlugins,
+    rehypePlugins
+  };
+}
+async function resolveImportPlugins(input) {
+  return Array.isArray(input) ? await Promise.all(
+    input.map(async (v) => {
+      if (isLazyPluginResolution(v)) {
+        const [pluginName, options] = v;
+        const plugin = (await import(pluginName)).default;
+        return () => plugin(options);
+      }
+      return v;
+    })
+  ) : input;
+}
+function isLazyPluginResolution(v) {
+  return Array.isArray(v) && typeof v[0] === "string";
+}
+var defaultPageExtensions = ["mdx", "md", "jsx", "js", "tsx", "ts"];
+function createMDX({
+  mdxOptions = {},
+  cwd = process.cwd(),
+  rootMapPath = "./.map.ts",
+  rootContentPath = "./content",
+  buildSearchIndex = false,
+  ...loadOptions
+} = {}) {
+  const rootMapFile = path2.resolve(cwd, rootMapPath);
+  const rootContentDir = path2.resolve(cwd, rootContentPath);
+  if (new RootMapFile({
+    rootMapFile
+  }).create()) {
+    console.log(`Created ${rootMapFile} automatically for you.`);
+  }
+  return (nextConfig = {}) => {
+    return {
+      ...nextConfig,
+      pageExtensions: nextConfig.pageExtensions ?? defaultPageExtensions,
+      experimental: {
+        turbo: {
+          rules: {
+            "*.{md,mdx}": [
+              {
+                loader: "fumadocs-mdx/loader-mdx",
+                // TODO: how do we communicate to the user about this?
+                // @ts-expect-error(arlyon): user must ensure only JSON is sent
+                options: mdxOptions
+              }
+            ],
+            ".map.ts": [
+              {
+                loader: "fumadocs-mdx/loader",
+                options: {
+                  rootContentDir,
+                  rootMapFile,
+                  ...loadOptions
+                }
+              }
+            ]
+          }
+        }
+      },
+      webpack: (config, options) => {
+        config.resolve ||= {};
+        const alias = config.resolve.alias;
+        alias["next-mdx-import-source-file"] = [
+          "private-next-root-dir/src/mdx-components",
+          "private-next-root-dir/mdx-components",
+          "@mdx-js/react"
+        ];
+        config.module ||= {};
+        config.module.rules ||= [];
+        config.module.rules.push(
+          {
+            test: /\.mdx?$/,
+            use: [
+              options.defaultLoaders.babel,
+              {
+                loader: "fumadocs-mdx/loader-mdx",
+                options: mdxOptions
+              }
+            ]
+          },
+          {
+            test: rootMapFile,
+            use: {
+              loader: "fumadocs-mdx/loader",
+              options: {
+                rootContentDir,
+                rootMapFile,
+                ...loadOptions
+              }
+            }
+          }
+        );
+        config.plugins ||= [];
+        if (buildSearchIndex !== false)
+          config.plugins.push(
+            new SearchIndexPlugin({
+              rootContentDir,
+              rootMapFile,
+              ...typeof buildSearchIndex === "object" ? buildSearchIndex : {}
+            })
+          );
+        return nextConfig.webpack?.(config, options) ?? config;
+      }
+    };
+  };
+}
+
+export {
+  getMDXLoaderOptions,
+  createMDX
+};
diff --git a/node_modules/fumadocs-mdx/dist/config-Bhu4aEof.d.mts b/node_modules/fumadocs-mdx/dist/config-Bhu4aEof.d.mts
new file mode 100644
index 0000000..d43aca4
--- /dev/null
+++ b/node_modules/fumadocs-mdx/dist/config-Bhu4aEof.d.mts
@@ -0,0 +1,91 @@
+import { NextConfig } from 'next';
+import { RemarkHeadingOptions, RemarkImageOptions, RehypeCodeOptions } from 'fumadocs-core/mdx-plugins';
+import { Pluggable } from 'unified';
+import { ProcessorOptions } from '@mdx-js/mdx';
+import { LoaderContext } from 'webpack';
+import { O as Options } from './search-index-plugin-Dz3ovOHb.mjs';
+
+type ProcessorOptionsInput = Omit<ProcessorOptions, 'rehypePlugins' | 'remarkPlugins'> & {
+    rehypePlugins?: ResolvePluginsInput;
+    remarkPlugins?: ResolvePluginsInput;
+};
+interface MDXLoaderOptionsInput extends ProcessorOptionsInput {
+    /**
+     * Fetch last modified time with specified version control
+     * @defaultValue 'none'
+     */
+    lastModifiedTime?: 'git' | 'none';
+}
+interface MDXLoaderOptions extends ProcessorOptions {
+    /**
+     * Fetch last modified time with specified version control
+     * @defaultValue 'none'
+     */
+    lastModifiedTime?: 'git' | 'none';
+}
+interface InternalBuildInfo {
+    __fumadocs?: {
+        path: string;
+        /**
+         * `vfile.data` parsed from file
+         */
+        data: unknown;
+    };
+}
+/**
+ * Load MDX/markdown files
+ *
+ * it supports frontmatter by parsing and injecting the data in `vfile.data.frontmatter`
+ */
+declare function loader(this: LoaderContext<MDXLoaderOptionsInput>, source: string, callback: LoaderContext<MDXLoaderOptions>['callback']): Promise<void>;
+
+type MDXOptions = Omit<NonNullable<MDXLoaderOptionsInput>, 'rehypePlugins' | 'remarkPlugins'> & {
+    rehypePlugins?: ResolvePluginsInput;
+    remarkPlugins?: ResolvePluginsInput;
+    /**
+     * The folder from which to import the MDX components
+     */
+    providerImportSource?: string | null;
+    /**
+     * Properties to export from `vfile.data`
+     */
+    valueToExport?: string[];
+    remarkHeadingOptions?: RemarkHeadingOptions;
+    remarkImageOptions?: RemarkImageOptions | false;
+    rehypeCodeOptions?: RehypeCodeOptions | false;
+};
+/**
+ * A delayed plugin resolution, which dynamically imports the named plugin,
+ * and then passes the options to it.
+ */
+type LazyPluginResolution = [string, object];
+/**
+ * A plugin can either be a valid unified plugin or a pair of plugin name and options
+ */
+type ResolvePluginsInput = ResolvePlugins | LazyPluginResolution[];
+type ResolvePlugins = Pluggable[] | ((v: Pluggable[]) => Pluggable[]);
+interface CreateMDXOptions {
+    cwd?: string;
+    mdxOptions?: MDXLoaderOptionsInput;
+    buildSearchIndex?: Omit<Options, 'rootContentDir' | 'rootMapFile'> | boolean;
+    /**
+     * Where the root map.ts should be, relative to cwd
+     *
+     * @defaultValue `'./.map.ts'`
+     */
+    rootMapPath?: string;
+    /**
+     * Where the content directory should be, relative to cwd
+     *
+     * @defaultValue `'./content'`
+     */
+    rootContentPath?: string;
+    /**
+     * {@link LoaderOptions.include}
+     */
+    include?: string | string[];
+}
+declare function getMDXLoaderOptions({ valueToExport, rehypeCodeOptions, remarkImageOptions, remarkHeadingOptions, ...mdxOptions }: MDXOptions): Promise<MDXLoaderOptions>;
+declare function createMDX({ mdxOptions, cwd, rootMapPath, rootContentPath, buildSearchIndex, ...loadOptions }?: CreateMDXOptions): (nextConfig?: NextConfig) => NextConfig;
+
+export { type CreateMDXOptions as C, type InternalBuildInfo as I, type MDXLoaderOptionsInput as M, type ResolvePluginsInput as R, type MDXLoaderOptions as a, createMDX as c, getMDXLoaderOptions as g, loader as l };
diff --git a/node_modules/fumadocs-mdx/dist/config.d.mts b/node_modules/fumadocs-mdx/dist/config.d.mts
index c8d82d8..c940758 100644
--- a/node_modules/fumadocs-mdx/dist/config.d.mts
+++ b/node_modules/fumadocs-mdx/dist/config.d.mts
@@ -1,44 +1,7 @@
-import { NextConfig } from 'next';
-import { RemarkHeadingOptions, RemarkImageOptions, RehypeCodeOptions } from 'fumadocs-core/mdx-plugins';
-import { Pluggable } from 'unified';
-import { Options as Options$1 } from './loader-mdx.mjs';
-import { O as Options } from './search-index-plugin-Dz3ovOHb.mjs';
+import 'next';
+import 'fumadocs-core/mdx-plugins';
+import 'unified';
+export { C as CreateMDXOptions, R as ResolvePluginsInput, c as default, g as getMDXLoaderOptions } from './config-Bhu4aEof.mjs';
+import './search-index-plugin-Dz3ovOHb.mjs';
 import '@mdx-js/mdx';
 import 'webpack';
-
-type MDXOptions = Omit<NonNullable<Options$1>, 'rehypePlugins' | 'remarkPlugins'> & {
-    rehypePlugins?: ResolvePlugins;
-    remarkPlugins?: ResolvePlugins;
-    /**
-     * Properties to export from `vfile.data`
-     */
-    valueToExport?: string[];
-    remarkHeadingOptions?: RemarkHeadingOptions;
-    remarkImageOptions?: RemarkImageOptions | false;
-    rehypeCodeOptions?: RehypeCodeOptions | false;
-};
-type ResolvePlugins = Pluggable[] | ((v: Pluggable[]) => Pluggable[]);
-interface CreateMDXOptions {
-    cwd?: string;
-    mdxOptions?: MDXOptions;
-    buildSearchIndex?: Omit<Options, 'rootContentDir' | 'rootMapFile'> | boolean;
-    /**
-     * Where the root map.ts should be, relative to cwd
-     *
-     * @defaultValue `'./.map.ts'`
-     */
-    rootMapPath?: string;
-    /**
-     * Where the content directory should be, relative to cwd
-     *
-     * @defaultValue `'./content'`
-     */
-    rootContentPath?: string;
-    /**
-     * {@link LoaderOptions.include}
-     */
-    include?: string | string[];
-}
-declare function createMDX({ mdxOptions, cwd, rootMapPath, rootContentPath, buildSearchIndex, ...loadOptions }?: CreateMDXOptions): (nextConfig?: NextConfig) => NextConfig;
-
-export { type CreateMDXOptions, createMDX as default };
diff --git a/node_modules/fumadocs-mdx/dist/config.mjs b/node_modules/fumadocs-mdx/dist/config.mjs
index 857bebf..4831ecf 100644
--- a/node_modules/fumadocs-mdx/dist/config.mjs
+++ b/node_modules/fumadocs-mdx/dist/config.mjs
@@ -1,259 +1,8 @@
-// src/config.ts
-import path2 from "node:path";
 import {
-  rehypeCode,
-  remarkGfm,
-  remarkStructure,
-  remarkHeading,
-  remarkImage
-} from "fumadocs-core/mdx-plugins";
-
-// src/webpack-plugins/map-plugin.ts
-import * as fs from "node:fs";
-var firstLoad = true;
-var content = `
-/** Auto-generated **/
-declare const map: Record<string, unknown>
-
-export { map }
-`.trim();
-var MapWebpackPlugin = class _MapWebpackPlugin {
-  constructor(options) {
-    this.options = options;
-  }
-  apply(compiler) {
-    const logger = compiler.getInfrastructureLogger(_MapWebpackPlugin.name);
-    compiler.hooks.beforeCompile.tap(_MapWebpackPlugin.name, () => {
-      if (firstLoad && !fs.existsSync(this.options.rootMapFile)) {
-        fs.writeFileSync(this.options.rootMapFile, content);
-        logger.info("Created map.ts file for you automatically");
-        firstLoad = false;
-      }
-    });
-  }
-};
-
-// src/mdx-plugins/utils.ts
-import { valueToEstree } from "estree-util-value-to-estree";
-function getMdastExport(name, value) {
-  return {
-    type: "mdxjsEsm",
-    value: "",
-    data: {
-      estree: {
-        type: "Program",
-        sourceType: "module",
-        body: [
-          {
-            type: "ExportNamedDeclaration",
-            specifiers: [],
-            source: null,
-            declaration: {
-              type: "VariableDeclaration",
-              kind: "const",
-              declarations: [
-                {
-                  type: "VariableDeclarator",
-                  id: {
-                    type: "Identifier",
-                    name
-                  },
-                  init: valueToEstree(value)
-                }
-              ]
-            }
-          }
-        ]
-      }
-    }
-  };
-}
-
-// src/mdx-plugins/remark-exports.ts
-function remarkMdxExport({ values }) {
-  return (tree, vfile) => {
-    for (const name of values) {
-      if (!(name in vfile.data)) return;
-      tree.children.unshift(getMdastExport(name, vfile.data[name]));
-    }
-  };
-}
-
-// src/webpack-plugins/search-index-plugin.ts
-import * as path from "node:path";
-import { createRequire } from "node:module";
-import { createGetUrl, getSlugs, parseFilePath } from "fumadocs-core/source";
-var require2 = createRequire(import.meta.url);
-var pkg = require2("next/dist/compiled/webpack/webpack.js");
-var SearchIndexPlugin = class _SearchIndexPlugin {
-  constructor(options) {
-    this.options = options;
-  }
-  apply(compiler) {
-    const {
-      rootContentDir,
-      productionOnly = true,
-      filter = () => true,
-      getUrl = (file) => {
-        return createGetUrl("/")(getSlugs(parseFilePath(file)));
-      }
-    } = this.options;
-    const logger = compiler.getInfrastructureLogger(_SearchIndexPlugin.name);
-    const isProduction = process.env.NODE_ENV === "production";
-    if (productionOnly && !isProduction) return;
-    compiler.hooks.compilation.tap(_SearchIndexPlugin.name, (compilation) => {
-      if (compilation.name !== "server") return;
-      compilation.hooks.processAssets.tap(
-        {
-          name: _SearchIndexPlugin.name,
-          stage: pkg.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS
-        },
-        () => {
-          const indexFiles = /* @__PURE__ */ new Map();
-          for (const m of compilation.modules.values()) {
-            if (!m.buildInfo || !("__fumadocs" in m.buildInfo)) continue;
-            const info = m.buildInfo.__fumadocs;
-            const relativePath = path.relative(rootContentDir, info.path);
-            if (relativePath.startsWith("../") || !filter(relativePath))
-              continue;
-            indexFiles.set(info.path, {
-              id: info.path,
-              structuredData: info.data.structuredData,
-              title: info.data.frontmatter.title,
-              description: info.data.frontmatter.description,
-              url: getUrl(relativePath)
-            });
-          }
-          compilation.emitAsset(
-            "fumadocs_search.json",
-            new pkg.sources.RawSource(
-              JSON.stringify(Array.from(indexFiles.values()))
-            )
-          );
-          logger.info("Generated Search Indexes");
-        }
-      );
-    });
-  }
-};
-
-// src/config.ts
-function pluginOption(def, options = []) {
-  const list = def(Array.isArray(options) ? options : []).filter(
-    Boolean
-  );
-  if (typeof options === "function") {
-    return options(list);
-  }
-  return list;
-}
-function getMDXLoaderOptions({
-  valueToExport = [],
-  rehypeCodeOptions,
-  remarkImageOptions,
-  remarkHeadingOptions,
-  ...mdxOptions
-}) {
-  const mdxExports = [
-    "structuredData",
-    "toc",
-    "frontmatter",
-    "lastModified",
-    ...valueToExport
-  ];
-  const remarkPlugins = pluginOption(
-    (v) => [
-      remarkGfm,
-      [remarkHeading, remarkHeadingOptions],
-      remarkImageOptions !== false && [remarkImage, remarkImageOptions],
-      ...v,
-      remarkStructure,
-      [remarkMdxExport, { values: mdxExports }]
-    ],
-    mdxOptions.remarkPlugins
-  );
-  const rehypePlugins = pluginOption(
-    (v) => [
-      rehypeCodeOptions !== false && [rehypeCode, rehypeCodeOptions],
-      ...v
-    ],
-    mdxOptions.rehypePlugins
-  );
-  return {
-    providerImportSource: "next-mdx-import-source-file",
-    ...mdxOptions,
-    remarkPlugins,
-    rehypePlugins
-  };
-}
-var defaultPageExtensions = ["mdx", "md", "jsx", "js", "tsx", "ts"];
-function createMDX({
-  mdxOptions = {},
-  cwd = process.cwd(),
-  rootMapPath = "./.map.ts",
-  rootContentPath = "./content",
-  buildSearchIndex = false,
-  ...loadOptions
-} = {}) {
-  const rootMapFile = path2.resolve(cwd, rootMapPath);
-  const rootContentDir = path2.resolve(cwd, rootContentPath);
-  const mdxLoaderOptions = getMDXLoaderOptions(mdxOptions);
-  return (nextConfig = {}) => {
-    return {
-      ...nextConfig,
-      pageExtensions: nextConfig.pageExtensions ?? defaultPageExtensions,
-      webpack: (config, options) => {
-        config.resolve ||= {};
-        const alias = config.resolve.alias;
-        alias["next-mdx-import-source-file"] = [
-          "private-next-root-dir/src/mdx-components",
-          "private-next-root-dir/mdx-components",
-          "@mdx-js/react"
-        ];
-        config.module ||= {};
-        config.module.rules ||= [];
-        config.module.rules.push(
-          {
-            test: /\.mdx?$/,
-            use: [
-              options.defaultLoaders.babel,
-              {
-                loader: "fumadocs-mdx/loader-mdx",
-                options: mdxLoaderOptions
-              }
-            ]
-          },
-          {
-            test: rootMapFile,
-            use: {
-              loader: "fumadocs-mdx/loader",
-              options: {
-                rootContentDir,
-                rootMapFile,
-                ...loadOptions
-              }
-            }
-          }
-        );
-        config.plugins ||= [];
-        config.plugins.push(
-          new MapWebpackPlugin({
-            rootMapFile
-          })
-        );
-        if (buildSearchIndex !== false)
-          config.plugins.push(
-            new SearchIndexPlugin({
-              rootContentDir,
-              rootMapFile,
-              ...typeof buildSearchIndex === "object" ? buildSearchIndex : {}
-            })
-          );
-        return nextConfig.webpack?.(config, options) ?? config;
-      }
-    };
-  };
-}
+  createMDX,
+  getMDXLoaderOptions
+} from "./chunk-2D5JCHQ5.mjs";
 export {
-  createMDX as default
+  createMDX as default,
+  getMDXLoaderOptions
 };
diff --git a/node_modules/fumadocs-mdx/dist/loader-mdx.d.mts b/node_modules/fumadocs-mdx/dist/loader-mdx.d.mts
index 338b7ee..977759e 100644
--- a/node_modules/fumadocs-mdx/dist/loader-mdx.d.mts
+++ b/node_modules/fumadocs-mdx/dist/loader-mdx.d.mts
@@ -1,27 +1,7 @@
-import { ProcessorOptions } from '@mdx-js/mdx';
-import { LoaderContext } from 'webpack';
-
-interface Options extends ProcessorOptions {
-    /**
-     * Fetch last modified time with specified version control
-     * @defaultValue 'none'
-     */
-    lastModifiedTime?: 'git' | 'none';
-}
-interface InternalBuildInfo {
-    __fumadocs?: {
-        path: string;
-        /**
-         * `vfile.data` parsed from file
-         */
-        data: unknown;
-    };
-}
-/**
- * Load MDX/markdown files
- *
- * it supports frontmatter by parsing and injecting the data in `vfile.data.frontmatter`
- */
-declare function loader(this: LoaderContext<Options>, source: string, callback: LoaderContext<Options>['callback']): Promise<void>;
-
-export { type InternalBuildInfo, type Options, loader as default };
+import '@mdx-js/mdx';
+import 'webpack';
+export { I as InternalBuildInfo, a as MDXLoaderOptions, M as MDXLoaderOptionsInput, l as default } from './config-Bhu4aEof.mjs';
+import 'next';
+import 'fumadocs-core/mdx-plugins';
+import 'unified';
+import './search-index-plugin-Dz3ovOHb.mjs';
diff --git a/node_modules/fumadocs-mdx/dist/loader-mdx.mjs b/node_modules/fumadocs-mdx/dist/loader-mdx.mjs
index 9493c54..c79f79c 100644
--- a/node_modules/fumadocs-mdx/dist/loader-mdx.mjs
+++ b/node_modules/fumadocs-mdx/dist/loader-mdx.mjs
@@ -1,3 +1,7 @@
+import {
+  getMDXLoaderOptions
+} from "./chunk-2D5JCHQ5.mjs";
+
 // src/loader-mdx.ts
 import path2 from "node:path";
 import { createProcessor } from "@mdx-js/mdx";
@@ -37,7 +41,8 @@ async function loader(source, callback) {
   this.cacheable(true);
   const context = this.context;
   const filePath = this.resourcePath;
-  const { lastModifiedTime, ...options } = this.getOptions();
+  const { lastModifiedTime, ...userOptions } = this.getOptions();
+  const options = await getMDXLoaderOptions(userOptions);
   const { content, data: frontmatter } = grayMatter(source);
   const detectedFormat = filePath.endsWith(".mdx") ? "mdx" : "md";
   const format = options.format ?? detectedFormat;
@@ -62,8 +67,9 @@ async function loader(source, callback) {
     }
   }).then(
     (file) => {
-      const info = this._module?.buildInfo;
-      info.__fumadocs = {
+      const module = this._module ?? (this._module = { buildInfo: {} });
+      const buildInfo = module.buildInfo ?? (module.buildInfo = {});
+      buildInfo.__fumadocs = {
         path: filePath,
         data: file.data
       };

package litehouse:plugin;

interface plugin {
    record event {
        id: u64,
        timestamp: u64,
        inner: update,
    }

    variant update {
      time(u64),

      temperature(float64),
      wind-speed(float64),

      current(float64),
      voltage(u16),
      power(u16),
      on-off(bool),
    }

    variant subscription {
      time(time-subscription),
      update(update-subscription),
    }

    variant update-subscription {
      temperature,
      wind-speed,
      current,
      voltage,
      power,
      on-off
    }

    variant time-subscription {
      every(every),
      at(u64),
    }

    record every {
      amount: u64,
      unit: time-unit,
    }

    variant time-unit {
      second,
      minute,
      hour,
      day,
      week,
      month,
      year,
    }

    resource runner {
      constructor(nickname: string, config: option<string>);
      subscribe: func() -> result<list<subscription>, u32>;
      update: func(events: list<event>) -> result<bool, u32>;
    }

    record metadata {
      config-schema: option<string>,
      version: string,
      identifier: string,
    }

    get-metadata: func() -> metadata;
}

world plugin-host {
  use plugin.{event, update, subscription};
  import wasi:http/outgoing-handler@0.2.0-rc-2023-12-05;

  import send-update: func(nickname: string, update: update);
  export plugin;
}
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/L0rBNlYQfCr
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import { Button } from "@/components/ui/button";
import { starsAndCommits } from "@/lib/github";
/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { Suspense } from "react";

export function GithubStars({ url }: { url?: string }) {
  const repoName = url?.split("/").slice(-2).join("/");
  return (
    <div className="border border-accent bg-secondary px-4 py-3 sm:px-6 flex items-center justify-between">
      {url && repoName ? (
        <Suspense fallback={<RepoData url={url} name={repoName} />}>
          <CommitAndStars url={url} />
        </Suspense>
      ) : (
        <div className="text-muted-foreground text-sm h-[36px] flex items-center">
          No source provided
        </div>
      )}
    </div>
  );
}

const units = {
  year: 24 * 60 * 60 * 1000 * 365,
  month: (24 * 60 * 60 * 1000 * 365) / 12,
  day: 24 * 60 * 60 * 1000,
  hour: 60 * 60 * 1000,
  minute: 60 * 1000,
  second: 1000,
} as const;

const rtf = new Intl.RelativeTimeFormat("en", { numeric: "auto" });

const getRelativeTime = (d1: Date, d2 = new Date()) => {
  // @ts-expect-errors(arlyon)
  const elapsed = d1 - d2;

  // "Math.abs" accounts for both "past" & "future" scenarios
  for (const u in units) {
    const unit = u as keyof typeof units;
    if (Math.abs(elapsed) > units[unit] || u === "second")
      return rtf.format(Math.round(elapsed / units[unit]), unit);
  }
};

function RepoData({
  url,
  name,
  commit,
  stars,
}: {
  url: string;
  name: string;
  commit?: { sha: string; date: Date; url: string };
  stars?: string;
  star_url?: string;
}) {
  return (
    <>
      <div className="flex items-center">
        <Link className="font-bold hover:underline" href={url} target="_blank">
          {name}
        </Link>
        <span className="ml-2 text-sm text-muted-foreground">
          Latest commit:{" "}
          {commit ? (
            <>
              <Link
                href={commit.url}
                className="font-medium text-primary hover:underline"
              >
                {commit.sha.slice(0, 7)}
              </Link>{" "}
              {getRelativeTime(commit.date)}
            </>
          ) : null}
        </span>
      </div>
      <div className="flex items-center space-x-4">
        {stars ? (
          <div className="flex items-center space-x-10 text-sm">
            <StarIcon className="h-4 w-4" />
            {stars}
          </div>
        ) : null}
        <Link href={`${url}/stargazers`} target="_blank">
          <Button size="sm" variant="outline">
            Star
          </Button>
        </Link>
      </div>
    </>
  );
}

async function CommitAndStars({ url }: { url: string }) {
  const repoName = url.split("/").slice(-2).join("/");
  // fetch github stars from the api for the repo
  const { stars, commit } = await starsAndCommits(repoName);

  return <RepoData url={url} name={repoName} commit={commit} stars={stars} />;
}

function StarIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <title>Star</title>
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  );
}
